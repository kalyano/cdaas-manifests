version: v1
kind: kubernetes
application: kals-app

targets:
  # D-Line
  d1-pqa:
    account: local-kind-cluster
    namespace: potato-facts-staging
    strategy: rolling
  
  d1-sprint:
    account: local-kind-cluster
    namespace: potato-facts-staging
    strategy: rolling

  d1-pmgt:
    account: local-kind-cluster
    namespace: potato-facts-staging
    strategy: rolling
  
  d1-np:
    account: local-kind-cluster
    namespace: potato-facts-staging
    strategy: rolling

  # Q-Line
  q1-pqa:
    account: local-kind-cluster
    namespace: potato-facts-staging
    strategy: rolling
    constraints:
      dependsOn: [d1-pqa,d1-spint,d1-pmgt,d1-np]
   
  q1-sprint:
    account: local-kind-cluster
    namespace: potato-facts-staging
    strategy: rolling
    constraints:
      dependsOn: [d1-pqa,d1-spint,d1-pmgt,d1-np]

  q1-pmgt:
    account: local-kind-cluster
    namespace: potato-facts-staging
    strategy: rolling
    constraints:
      dependsOn: [d1-pqa,d1-spint,d1-pmgt,d1-np]

  q1-np:
    account: local-kind-cluster
    namespace: potato-facts-staging
    strategy: rolling
    constraints:
      dependsOn: [d1-pqa,d1-spint,d1-pmgt,d1-np]

  # E-Line
  e1-pqa:
    account: local-kind-cluster
    namespace: potato-facts-staging
    strategy: rolling
    constraints:
      dependsOn: [q1-pqa,q1-spint,q1-pmgt,q1-np]

  e1-sprint:
    account: local-kind-cluster
    namespace: potato-facts-staging
    strategy: rolling
    constraints:
      dependsOn: [q1-pqa,q1-spint,q1-pmgt,q1-np]

  e1-pmgt:
    account: local-kind-cluster
    namespace: potato-facts-staging
    strategy: rolling
    constraints:
      dependsOn: [q1-pqa,q1-spint,q1-pmgt,q1-np]

  e1-np:
    account: local-kind-cluster
    namespace: potato-facts-staging
    strategy: rolling
    constraints:
      dependsOn: [q1-pqa,q1-spint,q1-pmgt,q1-np]

  # P-Line
  p1-pqa:
    account: local-kind-cluster
    namespace: potato-facts-staging
    strategy: rolling
    constraints:
      dependsOn: [e1-pqa,e1-spint,e1-pmgt,e1-np]

  p1-sprint:
    account: local-kind-cluster
    namespace: potato-facts-staging
    strategy: rolling
    constraints:
      dependsOn: [e1-pqa,e1-spint,e1-pmgt,e1-np]

  p1-pmgt:
    account: local-kind-cluster
    namespace: potato-facts-staging
    strategy: rolling
    constraints:
      dependsOn: [e1-pqa,e1-spint,e1-pmgt,e1-np] 

  # P-Line PROD
  "P1-NP (us-w2)":
    account: local-kind-cluster
    namespace: potato-facts-staging
    strategy: rolling
    constraints:
      dependsOn: [p1-pqa,p1-spint,p1-pmgt]
      # beforeDeployment:
      #   - pause:
      #       untilApproved: true 
      # afterDeployment:
      #   - runWebhook:
      #       name: Argo-WebHook

  "P1-NP (us-e2)":
    account: local-kind-cluster
    namespace: potato-facts-staging
    strategy: rolling
    constraints:
      dependsOn: ["P1-NP (us-w2)"]
      # beforeDeployment:
      #   - pause:
      #       untilApproved: true 
      # afterDeployment:
      #   - runWebhook:
      #       name: Argo-WebHook

manifests:
  - path: https://raw.githubusercontent.com/armory-io/cdaas-examples/main/hello-armory/manifests/potato-facts-v1.yaml
  - path: https://raw.githubusercontent.com/armory-io/cdaas-examples/main/hello-armory/manifests/potato-facts-service.yaml
  - path: https://raw.githubusercontent.com/armory-io/cdaas-examples/main/hello-armory/manifests/staging-namespace.yaml
  #- path: https://raw.githubusercontent.com/armory-io/cdaas-examples/main/hello-armory/manifests/prod-namespace.yaml
  #  targets: ["p1-np-w2", "p1-np-e2"]

webhooks:
  # - name: Argo-WebHook
  #   method: POST
  #   uriTemplate: <ARGO API URL HERE>
  #   networkMode: direct
  #   disableCallback: true
  #   headers:
  #     - key: Authorization
  #       value: Bearer <TOKEN HERE>
  #     - key: Content-Type
  #       value: application/json
  #   bodyTemplate:
  #     inline:  >-
  #       {
  #            WEBHOOK CONTENT HERE
  #       }
  #   retryCount: 3

strategies:
  rolling:
    canary:
      steps:
        - setWeight:
            weight: 100
  trafficSplit:
    canary:
      steps:
        - setWeight:
            weight: 25
        - exposeServices:
            services:
              - kal-service
            ttl:
              duration: 30
              unit: minutes
        - pause:
            untilApproved: true
        - setWeight:
            weight: 100